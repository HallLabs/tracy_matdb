`matdb.yml` Database Specification File
=======================================

.. note:: At the moment, `matdb` only supports calculation using VASP to get DFT
	  energies, forces, virials and hessian matrices.

`matdb.yml` tracks the specification for a set of databases over
database group types that together represent all example
configurations for generating an interatomic
potential. :doc:`databases` discusses the database group types and how
they work. In this document, we are interested mainly in how to
configure their options. The following options are available at the
top-level of the YAML file:

1. **title**: user-selected identifier for the particular config
   database.
2. **species**: describes which elements are used to generate the
   configurations.
3. **root**: where to store the folders generated by `matdb`.
4. **venv**: a python virtualenv to use.
5. **calculator**: describes the *default* parameters for the `ase`
   calculator including the k-point selection method and density; this
   can be overridden at the group level.
6. **execution**: HPC parameters for the jobs that will be created
   when running each of the groups. For details on which methods are
   supported see :doc:`execution`.
7. **databases**: list of groups to generate for these databases.
8. **training**: parameters for the methods that will be used to
    generate the interatomic potential.
9. **splits**: allows for the databases created to be split multiple
   ways for training and validation tests.

The follow examples will assume the use of the VASP calculator,
examples of how to configure the other calculators are provided in
:doc:`calculator`.
   
`species` Option
----------------

The kinds of elements described in this list must be given in the
order that they appear in the POSCAR type files. For example:

.. code-block:: yaml
		
   species:
     - 'Pd'
     - 'Ag'

will generate POTCAR files with the `Pd` pseudopotential first.

`calculator` Option
-------------------

Default parameters for `ase` calculator can be specified using
`calculator`. Most of the options have exactly the same names as they
would have in the relavent input file and accept values as
expected. The exceptions are the kpoints and the potentials sections
for which individual documentation from each calculator should be
consulted. Supported calculators are: :doc:`calculators/vasp` and
:doc:`calculators/qe`. The following is an example using the `VASP`
calculator:

.. code-block:: yaml

   calculator:
     name: Vasp
     nsw: 1
     pp: 'pbe'
     kpoints:
       method: 'mueller'
       mindistance: 30
     potcars:
      directory: './tests/vasp'
      xc: 'PBE'
      versions:
        Ag: '02Apr2005'
	Pd: '04Jan2005'
	Si: '05Jan2001'
      setups:
        Ag: '_pv'

- `name` is the name of the `ase` calculator to be used. Currently
  only Vasp, and Quippy calculators are support.
- `nsw` an example INCAR parameter for VASP.
- `pp` lets the `ase` calculator know which potential types are in
  use.
- `kpoints` specifies the k-point selection method and density. The
  `method` keyword determines which method will be used. For the
  'mueller' method the density or k-point spacing is set by the
  `mindistance` keyword.
- `potcars` specifies the location and type of POTCAR files
  used. Additionally the versions of the POTCARS must be supplied to
  ensure consistency in the potential and scientific reproducibility.
  
.. note:: These parameters can be overridden by a `calculator` section
   in any of the database specifications recorded later in the YAML
   file.

`execution` Option
------------------

`matdb` uses templates to build the bash files that submit jobs for
execution. It ships with templates that work with the SBATCH system,
but the templates can be adjusted easily using those as an
example. This dictionary has fields corresponding to the fields in the
template, and the values will be inserted directly. The exact fields
differ for each `execution` method, a list of currently supported
methods see :doc:`execution`. The only value that is universal to all
the `execution` methods is:

- **template**: name of the file in the `matdb/templates` directory to
  use as the execution template. This field is required for all
  execution fields.

The following example is for `sbatch`:

.. code-block:: yaml

   execution:
     template: 'run_array_ml.sh'
     time: 4
     ntasks: 1
     nodes: 1
     mem_per_cpu: 4
     job_name: 'AgPd DB'
     partition: 'physics'
     array_limit: 50
     modules_load: ['mkl/11.2.0']
     exec_path: 'vasp'

`databases` Option
------------------

`matdb` will generate a database according to settings in this
section.

.. note:: The options specified in the configuration file are usually
   passed directly as keyword arguments to the relevant class
   constructors. You can look at the class documentation for more
   details.

.. note:: All databases have a `name` argument that you can
   specify. If not given, a default will be chosen for you.
   
This option takes a list of dictionaries, where each dictionary has
settings peculiar to the type of database group being
constructed. Each database can include multiple database group types
using the `steps` command allowing for the linking of databases whose
calculations rely on each other.

.. note:: You can override the `execution` and `calculator` settings
   for a particular database by including an option in its dictionary
   that is formatted exactly the same way as described above. However,
   you do *not* need to include all options, only those you need to
   override must be specified.

Domain-Specific Languages
*************************

`matdb` uses two different domain-specific languages inside the
`database` specifications. One for the specification of seed
configurations and the other enables the database groups to be looped
over parameters.

Seed Configurations
^^^^^^^^^^^^^^^^^^^

Many of the database groups need seed configurations to run. Since
`matdb` interfaces with multiple calculators and file formats. As such
it is neccessary that the file format of each config file to be used
by a group be set by the user using the `seeds` keyword:

.. code-block:: yaml

   steps:
     - type: 'simple.Manual'
       seeds: ["POSCAR:PdAg25","POSCAR:PdAgp0","POSCAR:PdAg75"]

`seeds` take a list of configuration files as "file format : file
name". The file format can be any that are recognized by the
`ase.io.read`_. The files can have any name desired by the
user but they must be stored in a folder called *SEED* located in the
root directory for the database. 

.. _ase.io.read: https://wiki.fysik.dtu.dk/ase/ase/io/io.html

Parameter Grids
^^^^^^^^^^^^^^^

At times it may be useful to contruct databases that loop over
different parameters. For example:

.. code-block:: yaml

   steps:
     - type: 'enumerated.Enumerated'
       lattice*:
         - "bcc"
	 - "fcc"
       nconfigs: 10
       sizes: [1,4]
       ran_seed: 10

Any parameter of any database can be looped over by including the `*`
character at the end of the name. `matdb` will then create a subfolder
for each parameter combination. The folder names are a `-` seperated
list of parameter names and suffuxes. The default suffix is numerical,
i.e., 1, 2, 3, etc. However, the user can specify custom suffixes
using `*paramater name*_suffix*` and explicitly listing the suffixes
to be used or by specificying the a function `func`, with on optional
`reshape` flag if needed. The `func` keyword will accept any function
that can be parsed by :meth:`matdb.utility.special_functions`.


Enumerated Database
*******************

An enumerated database is one constructed from a random sampling of
the symmetryically unique arrangements of the `species` on a lattice
given by the user.

.. code-block:: yaml

   steps:		
     - type: 'enumerated.Enumerated'
       lattice*:
         - "bcc"
	 - "fcc"
       lattice_suffix*:
         - "bcc"
	 - "fcc"
       nconfigs: 10
       sizes: [1,4]
       rattle: 0.01

This tells `matdb` to enumerate the symmetrically unique
configurations of an fcc and bcc lattice, for volume factors of 1 to 4
times the parent cell volume, and select 10 configurations from each
lattice. Notice that we've used the `lattice*` flag to indicate that
we're listing multiple options for the lattice. This can be done with
any key word in any `matdb` database to create as diverse of a
sampling scheme as the user desires.

The `lattice_suffix*` flag tells `matdb` what to call the directory in
which each lattice's sampling will occure. In this case two
directories will be created 'lat-fcc' and 'lat-bcc' in which the
sampled configurations from each lattice will be stored.

`training` Options
******************

Once a database of configurations is available, `matdb` can automate
the fits for you using these settings. See :doc:`fitting` for more
details.

.. code-block:: yaml
		
   fitting: 
     dbs: ['*'] 
     execution:
       template: 'run_single_ml.sh'
       time: 10
       ntasks: 1
       nodes: 1
       mem_per_cpu: 500MB
       job_name: 'AgPt-fitting'
     fits:
       - name: "AgPd"
	 dbs: ["*"]
	 steps:
           - type: "mtp.MTP"
             select: 
               selection-limit: 200
             species:
	       - "Ag"
	       - "Pd"

- **execution**: as described above, this specifies the template for
  executing the fits.
- **fits**: the parameters for the specific fitting method. At present
  only :doc:`fitting/mtp` fits are supported by `matdb`.
- **dbs**: a list of the databases to use for the fitting, or '*' to
  include all databases in the YML file.

Full Example File
-----------------

.. literalinclude:: matdb.yml
   :language: yaml
   :linenos:
