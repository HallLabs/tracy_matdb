"""Tests the phonon database interface.
"""
import pytest
#from matdb.database.phonon import DynMatrix, Calibration, Modulation
DynMatrix = pytest.importorskip('matdb.database.phonon.DynMatrix')
Calibration = pytest.importorskip('matdb.database.phonon.Calibration')
Modulation = pytest.importorskip('matdb.database.phonon.Modulation')
from matdb.utility import relpath
from os import mkdir, path, symlink
#import quippy
quippy = pytest.importorskip('quippy')
import numpy as np

def compare_dicts(dict1,dict2):
    """Compares two dictionaries to see if they are the same.
    """

    if dict1.keys() != dict2.keys():
        return False

    for key in dict1:
        if not np.allclose(dict1[key],dict2[key]):
            return False

    return True

@pytest.fixture()
def Pd(tmpdir):
    from matdb.utility import relpath
    from matdb.database.controller import Controller
    from os import mkdir, symlink, remove

    target = relpath("./tests/Pd/matdb")
    dbdir = str(tmpdir.join("pd_db"))
    mkdir(dbdir)

    #We need to copy the POSCAR over from the testing directory to the temporary
    #one.
    from shutil import copy
    POSCAR = relpath("./tests/Pd/POSCAR")
    mkdir(path.join(dbdir,"seed"))
    copy(POSCAR, path.join(dbdir,"seed","Pd"))
    
    result = Controller(target, dbdir)
    return result

@pytest.fixture
def dynmatdb(Pd):
    """Returns a DynMatrix database for the Pd dynmatrix database.
    """
    Pd.setup()

    return Pd["dynmatrix/phonon/Pd/dim-16.00"]

# @pytest.fixture
# def caldb(tmpdir):
#     """Returns a Calibration database.
#     """
#     from matdb.utility import relpath
#     from matdb.database.controller import Controller
#     from os import mkdir

#     target = relpath("./tests/Pd/matdb2")
#     dbdir = str(tmpdir.join("pd2_db"))
#     mkdir(dbdir)
    
#     #We need to copy the POSCAR over from the testing directory to the temporary
#     #one.
#     from shutil import copy
#     POSCAR = relpath("./tests/Pd/POSCAR")
#     copy(POSCAR, dbdir)
    
#     Pd = Controller(target, dbdir)
#     Pd.setup()
#     return Pd["Pd.modulate"].steps['calib']

def test_setup_and_cleanup(dynmatdb):
    """Tests the setup and cleanup funtions that have been overwritten
    from the basic Database.
    """
    
    dynmatdb.setup()
    dynmatdb.setup(rerun=True)

    dynmatdb.cleanup()

def test_dmatrix(dynmatdb):
    """Tests the dmatrix extraction.
    """

    result = {'eigvals': np.array([ 0.,  0., -0.]),
              'dynmat': np.array([[ 0.+0.j,  0.+0.j,  0.+0.j],
                                  [-0.+0.j,  0.+0.j,  0.+0.j],
                                  [-0.+0.j, -0.+0.j, -0.+0.j]]),
              'eigvecs': np.array([[ 1.+0.j,  0.+0.j,  0.+0.j],
                                   [ 0.+0.j,  1.+0.j,  0.+0.j],
                                   [ 0.+0.j,  0.+0.j,  1.+0.j]])}
    src = relpath("./tests/data/Pd/dynmatrix/FORCE_SETS__Pd.phonon-16")
    target = path.join(dynmatdb.root,"phonopy","FORCE_SETS")
    symlink(src,target)

    temp = dynmatdb.dmatrix
    assert compare_dicts(result,temp)

    dynmatdb.dmatrix

def test_forcecalc(dynmatdb):
    """Tests the force calculation for the dynamical matrix.
    """
    src = relpath("./tests/data/Pd/complete/vasprun.xml__DynMatrix_phonon_Pd_dim-16.00")
    target = path.join(dynmatdb.root,"W.1","vasprun.xml")
    symlink(src,target)
    dynmatdb.calc_forcesets()
    assert path.isfile(path.join(dynmatdb.root,"phonopy","FORCE_SETS"))
    
    with open(path.join(dynmatdb.root,"phonopy","FORCE_SETS"),'r') as f:
        temp1 = f.read()
    with open(relpath("./tests/data/Pd/dynmatrix/FORCE_SETS__Pd.phonon-16"),'r') as f:
        temp2 = f.read()

    assert temp1==temp2
    
    
def test_calc_bands(dynmatdb):
    """Tests a band calculation and the construction of the band.yaml file.
    """    
    import random
    random.seed(1)
    np.random.seed(1)
    src = relpath("./tests/data/Pd/dynmatrix/FORCE_SETS__Pd.phonon-16")
    target = path.join(dynmatdb.root,"phonopy","FORCE_SETS")
    symlink(src,target)

    dynmatdb.calc_bands()

    assert path.isfile(path.join(dynmatdb.root,"phonopy","band.yaml"))
    
    from matdb.phonons import from_yaml
    temp1 = from_yaml(relpath("./tests/data/Pd/dynmatrix/band.yml__Pd.phonon-16"))
    temp2 = from_yaml(path.join(dynmatdb.root,"phonopy","band.yaml"))
    assert compare_dicts(temp1,temp2)
    assert compare_dicts(temp1,dynmatdb.bands)
    dynmatdb.calc_bands()

def test_DOS(dynmatdb):
    """Tests of the DOS calculation.
    """
    from matdb.database.phonon import sample_dos
    #Test creating the DOS mech file.
    src = relpath("./tests/data/Pd/dynmatrix/FORCE_SETS__Pd.phonon-16")
    target = path.join(dynmatdb.root,"phonopy","FORCE_SETS")
    symlink(src,target)

    dynmatdb.calc_DOS()
    assert path.isfile(path.join(dynmatdb.root,"phonopy","mesh.yaml"))
    
    dynmatdb.calc_DOS()

    #Now tests sampling the DOS
    result = sample_dos(relpath("./tests/data/Pd/dynmatrix/mesh.yaml__Pd.phonon-16"))
    assert result == [(1, [0.3076923, 0.0769231, 0.0]), (2, [-0.3846154, -0.5384615, 0.0769231]), (0, [0.6923077, 0.4615385, 0.1538462]), (0, [0.3076923, 0.2307692, 0.0]), (1, [0.4615385, 0.3076923, 0.1538462]), (2, [0.3846154, 0.3076923, 0.0]), (1, [0.5384615, 0.2307692, 0.0769231]), (1, [-0.4615385, 0.0769231, 0.0]), (2, [0.3846154, 0.1538462, 0.0769231]), (1, [-0.3846154, 0.2307692, 0.0769231]), (0, [0.6153846, 0.3846154, 0.1538462]), (2, [-0.3076923, 0.3076923, 0.0]), (0, [-0.3076923, 0.2307692, 0.0769231]), (2, [0.3846154, 0.0, 0.0]), (2, [0.2307692, 0.2307692, 0.0]), (1, [0.2307692, 0.0769231, 0.0]), (2, [-0.1538462, 0.2307692, 0.0769231]), (0, [0.1538462, 0.1538462, 0.0]), (0, [0.4615385, 0.2307692, 0.0]), (0, [-0.3846154, -0.5384615, 0.0769231]), (2, [-0.3076923, 0.2307692, 0.0]), (0, [0.4615385, 0.3846154, 0.0]), (2, [0.5384615, 0.2307692, 0.0769231]), (1, [0.5384615, 0.2307692, 0.0]), (2, [0.3076923, 0.2307692, 0.0769231]), (1, [0.4615385, 0.3846154, 0.0769231]), (1, [-0.1538462, 0.1538462, 0.0]), (1, [0.4615385, 0.0769231, 0.0]), (2, [-0.3846154, 0.3076923, 0.0]), (2, [-0.3846154, 0.3076923, 0.0]), (2, [-0.3846154, 0.2307692, 0.0]), (2, [-0.3846154, 0.2307692, 0.0769231]), (2, [0.5384615, 0.1538462, 0.0769231]), (2, [-0.3846154, -0.6153846, 0.0]), (1, [0.3846154, 0.2307692, 0.0769231]), (0, [-0.3076923, 0.3076923, 0.0]), (1, [-0.3076923, 0.2307692, 0.0769231]), (2, [-0.3846154, 0.2307692, 0.0]), (1, [0.4615385, 0.3076923, 0.1538462]), (1, [0.0769231, 0.0769231, 0.0]), (1, [0.4615385, 0.0, 0.0]), (0, [0.4615385, 0.0, 0.0]), (1, [0.2307692, 0.0, 0.0]), (2, [0.1538462, 0.0, 0.0]), (0, [0.0, 0.0, 0.0]), (0, [0.6153846, 0.3846154, 0.0769231]), (1, [-0.3076923, 0.0769231, 0.0]), (2, [0.6923077, 0.4615385, 0.1538462]), (0, [0.1538462, 0.0, 0.0]), (2, [-0.3076923, 0.3076923, 0.0769231]), (1, [-0.3076923, 0.2307692, 0.0769231]), (0, [0.5384615, 0.3076923, 0.0769231]), (1, [0.6153846, 0.3076923, 0.0769231]), (2, [0.5384615, 0.2307692, 0.0769231]), (0, [0.5384615, 0.3076923, 0.0]), (2, [-0.2307692, 0.2307692, 0.0769231]), (2, [-0.0769231, 0.0769231, 0.0]), (0, [-0.3076923, 0.2307692, 0.0769231]), (1, [0.4615385, 0.2307692, 0.0]), (2, [-0.3076923, 0.3846154, 0.0769231]), (1, [0.4615385, 0.3846154, 0.0]), (0, [0.3846154, 0.0, 0.0]), (2, [0.1538462, 0.0, 0.0]), (0, [0.0769231, 0.0, 0.0]), (2, [0.3846154, 0.2307692, 0.0]), (1, [-0.1538462, 0.0769231, 0.0]), (2, [-0.3846154, 0.2307692, 0.0769231]), (0, [-0.3076923, 0.1538462, 0.0]), (1, [0.3846154, 0.1538462, 0.0]), (0, [0.3076923, 0.1538462, 0.0769231]), (1, [0.3846154, 0.0, 0.0]), (0, [0.4615385, 0.2307692, 0.0769231]), (0, [-0.2307692, 0.3846154, 0.1538462]), (0, [0.5384615, 0.3076923, 0.0769231]), (2, [0.1538462, 0.0769231, 0.0]), (2, [0.5384615, 0.3076923, 0.1538462]), (1, [0.1538462, 0.0769231, 0.0]), (0, [-0.3076923, 0.2307692, 0.0]), (2, [0.3846154, 0.2307692, 0.0]), (1, [0.2307692, 0.0769231, 0.0]), (2, [0.2307692, 0.1538462, 0.0]), (2, [0.4615385, 0.2307692, 0.0]), (2, [-0.3846154, 0.3076923, 0.0]), (0, [0.5384615, 0.3846154, 0.0769231]), (0, [0.3076923, 0.1538462, 0.0769231]), (0, [-0.4615385, -0.5384615, 0.0]), (0, [0.4615385, 0.3076923, 0.0769231]), (1, [0.2307692, 0.0, 0.0]), (1, [0.1538462, 0.0, 0.0]), (1, [-0.3076923, 0.3846154, 0.0769231]), (2, [0.4615385, 0.1538462, 0.0769231]), (0, [0.4615385, 0.3846154, 0.0769231]), (0, [-0.2307692, 0.0769231, 0.0]), (0, [-0.3846154, -0.6153846, 0.0]), (0, [0.5384615, 0.2307692, 0.0]), (2, [0.3076923, 0.1538462, 0.0769231]), (1, [0.5384615, 0.3846154, 0.1538462]), (2, [0.1538462, 0.0, 0.0]), (1, [-0.2307692, 0.1538462, 0.0]), (1, [-0.2307692, 0.3076923, 0.0769231])]

    result2 = sample_dos(relpath("./tests/data/Pd/dynmatrix/mesh.yaml__Pd.phonon-16"),
                         sampling="sample")
    assert result2 == [(0, [-0.3846154, 0.0769231, 0.0]), (1, [-0.3846154, 0.1538462, 0.0]), (1, [-0.3846154, 0.2307692, 0.0769231]), (2, [0.3846154, 0.2307692, 0.0]), (0, [0.3076923, 0.1538462, 0.0769231]), (1, [-0.3076923, 0.2307692, 0.0769231]), (0, [0.2307692, 0.0769231, 0.0]), (1, [-0.3076923, 0.1538462, 0.0]), (2, [0.4615385, 0.1538462, 0.0]), (2, [0.4615385, 0.3846154, 0.0769231]), (1, [0.6153846, 0.3076923, 0.1538462]), (0, [0.6153846, 0.3846154, 0.0769231]), (0, [-0.3076923, 0.3076923, 0.0769231]), (1, [-0.3846154, 0.1538462, 0.0]), (2, [0.5384615, 0.4615385, 0.0769231]), (0, [-0.3846154, 0.2307692, 0.0]), (1, [0.5384615, 0.2307692, 0.0]), (1, [0.3846154, 0.1538462, 0.0769231]), (0, [-0.3076923, 0.3846154, 0.0769231]), (2, [0.4615385, 0.0769231, 0.0]), (1, [0.5384615, 0.2307692, 0.0]), (1, [0.6153846, 0.3076923, 0.0769231]), (2, [0.5384615, 0.3076923, 0.0769231]), (2, [-0.2307692, 0.1538462, 0.0]), (0, [0.4615385, 0.3076923, 0.1538462]), (2, [0.5384615, 0.3076923, 0.1538462]), (0, [-0.3076923, 0.2307692, 0.0769231]), (2, [-0.3076923, 0.3846154, 0.1538462]), (1, [-0.3076923, 0.0769231, 0.0]), (2, [0.6153846, 0.4615385, 0.1538462]), (2, [-0.3076923, 0.3846154, 0.1538462]), (0, [0.3076923, 0.1538462, 0.0769231]), (2, [0.5384615, 0.3846154, 0.0769231]), (2, [0.3076923, 0.1538462, 0.0]), (2, [0.5384615, 0.3076923, 0.0769231]), (0, [0.3076923, 0.2307692, 0.0]), (2, [-0.2307692, 0.3076923, 0.0769231]), (2, [0.5384615, 0.2307692, 0.0]), (0, [-0.3846154, 0.2307692, 0.0769231]), (2, [0.4615385, 0.3846154, 0.0769231]), (2, [-0.3846154, 0.2307692, 0.0769231]), (0, [-0.2307692, 0.3846154, 0.1538462]), (0, [0.3076923, 0.0, 0.0]), (2, [0.2307692, 0.0769231, 0.0]), (1, [0.4615385, 0.1538462, 0.0769231]), (0, [0.6153846, 0.4615385, 0.1538462]), (1, [-0.3846154, 0.2307692, 0.0]), (1, [-0.0769231, 0.0769231, 0.0]), (2, [0.0769231, 0.0769231, 0.0]), (1, [0.4615385, 0.2307692, 0.0]), (1, [0.4615385, 0.3846154, 0.0]), (2, [0.5384615, 0.1538462, 0.0769231]), (0, [-0.3846154, 0.0769231, 0.0]), (0, [0.4615385, 0.0769231, 0.0]), (2, [0.0769231, 0.0769231, 0.0]), (2, [0.3846154, 0.2307692, 0.0769231]), (2, [-0.2307692, 0.3076923, 0.0769231]), (2, [-0.2307692, 0.3076923, 0.0769231]), (0, [0.4615385, 0.3076923, 0.0]), (1, [0.4615385, 0.2307692, 0.0]), (1, [0.5384615, 0.3846154, 0.1538462]), (0, [0.4615385, 0.3076923, 0.0769231]), (2, [0.5384615, 0.3846154, 0.1538462]), (2, [-0.3846154, 0.2307692, 0.0]), (1, [0.5384615, 0.3846154, 0.0]), (0, [0.5384615, 0.1538462, 0.0769231]), (0, [0.3076923, 0.0769231, 0.0]), (1, [0.5384615, 0.3076923, 0.0]), (1, [0.5384615, 0.3076923, 0.1538462]), (1, [-0.3846154, -0.5384615, 0.0769231]), (1, [0.5384615, 0.3076923, 0.0]), (2, [0.0769231, 0.0, 0.0]), (0, [-0.3076923, 0.2307692, 0.0]), (2, [0.6153846, 0.4615385, 0.1538462]), (0, [-0.3076923, 0.2307692, 0.0769231]), (2, [-0.2307692, 0.2307692, 0.0]), (1, [0.2307692, 0.1538462, 0.0769231]), (0, [-0.3846154, 0.0769231, 0.0]), (2, [0.6153846, 0.3076923, 0.1538462]), (1, [-0.3846154, 0.2307692, 0.0]), (1, [0.4615385, 0.1538462, 0.0769231]), (0, [0.1538462, 0.0769231, 0.0]), (2, [0.6923077, 0.4615385, 0.1538462]), (1, [0.5384615, 0.2307692, 0.0769231]), (0, [0.3846154, 0.0769231, 0.0]), (0, [0.3076923, 0.2307692, 0.0769231]), (1, [0.4615385, 0.0769231, 0.0]), (0, [0.5384615, 0.3846154, 0.0769231]), (1, [0.4615385, 0.3076923, 0.1538462]), (2, [-0.2307692, 0.3076923, 0.0769231]), (2, [0.4615385, 0.3076923, 0.0]), (2, [0.3076923, 0.2307692, 0.0769231]), (1, [-0.2307692, 0.0769231, 0.0]), (1, [0.5384615, 0.2307692, 0.0769231]), (1, [0.4615385, 0.2307692, 0.0]), (0, [-0.3076923, 0.0769231, 0.0]), (2, [-0.3076923, 0.2307692, 0.0]), (1, [0.5384615, 0.3076923, 0.1538462]), (0, [0.5384615, 0.3846154, 0.0769231]), (0, [0.3846154, 0.0769231, 0.0])]

    result3 = sample_dos(relpath("./tests/data/Pd/dynmatrix/mesh.yaml__Pd.phonon-16"),
                         sampling="top")

    assert result3 == [(0, [0.5384615, 0.4615385, 0.0769231]), (0, [-0.4615385, -0.5384615, 0.0]), (1, [0.4615385, 0.4615385, 0.0]), (2, [0.3076923, 0.1538462, 0.0769231]), (1, [0.5384615, 0.2307692, 0.0]), (2, [0.3076923, 0.2307692, 0.0769231]), (1, [-0.4615385, -0.5384615, 0.0]), (1, [0.5384615, 0.4615385, 0.0769231]), (1, [-0.3076923, 0.2307692, 0.0]), (1, [0.5384615, 0.3076923, 0.0769231]), (1, [0.5384615, 0.3076923, 0.1538462]), (1, [0.5384615, 0.3846154, 0.0769231]), (1, [-0.3846154, 0.2307692, 0.0]), (1, [0.5384615, 0.3846154, 0.1538462]), (1, [-0.2307692, 0.3076923, 0.0769231]), (2, [-0.2307692, 0.0769231, 0.0]), (1, [0.5384615, 0.3846154, 0.0]), (1, [0.6153846, 0.3076923, 0.1538462]), (1, [-0.3846154, -0.5384615, 0.0769231]), (1, [0.5384615, 0.3076923, 0.0]), (2, [0.3076923, 0.1538462, 0.0]), (2, [0.3076923, 0.2307692, 0.0]), (1, [0.6153846, 0.4615385, 0.1538462]), (1, [0.6153846, 0.3076923, 0.0769231]), (1, [-0.3076923, 0.3076923, 0.0769231]), (1, [0.6153846, 0.3846154, 0.1538462]), (2, [-0.1538462, 0.2307692, 0.0769231]), (2, [0.3076923, 0.0769231, 0.0]), (1, [0.6153846, 0.3846154, 0.0769231]), (1, [-0.2307692, 0.3846154, 0.1538462]), (2, [-0.2307692, 0.1538462, 0.0]), (1, [-0.3846154, -0.6153846, 0.0]), (1, [-0.3076923, 0.3076923, 0.0]), (1, [0.6923077, 0.4615385, 0.1538462]), (2, [0.3846154, 0.2307692, 0.0769231]), (1, [-0.3846154, 0.3076923, 0.0]), (2, [0.3076923, 0.3076923, 0.0]), (1, [-0.3076923, 0.3846154, 0.1538462]), (1, [0.6923077, 0.4615385, 0.2307692]), (2, [0.3846154, 0.3076923, 0.0769231]), (2, [0.3846154, 0.1538462, 0.0769231]), (2, [0.3076923, 0.0, 0.0]), (2, [-0.2307692, 0.2307692, 0.0]), (1, [-0.3076923, 0.3846154, 0.0769231]), (2, [0.3846154, 0.2307692, 0.0]), (2, [0.4615385, 0.3076923, 0.1538462]), (2, [-0.3076923, 0.3846154, 0.0769231]), (2, [0.6923077, 0.4615385, 0.2307692]), (2, [-0.2307692, 0.2307692, 0.0769231]), (2, [0.3846154, 0.1538462, 0.0]), (2, [-0.3076923, 0.0769231, 0.0]), (2, [0.3846154, 0.3076923, 0.0]), (2, [-0.3076923, 0.3076923, 0.0]), (2, [-0.3076923, 0.3846154, 0.1538462]), (2, [-0.2307692, 0.3076923, 0.0769231]), (2, [-0.2307692, 0.3846154, 0.1538462]), (2, [0.4615385, 0.3076923, 0.0769231]), (2, [0.6923077, 0.4615385, 0.1538462]), (2, [0.5384615, 0.3076923, 0.1538462]), (2, [0.4615385, 0.2307692, 0.0769231]), (2, [-0.3076923, 0.2307692, 0.0]), (2, [-0.3076923, 0.1538462, 0.0]), (2, [0.6153846, 0.3846154, 0.1538462]), (2, [-0.3846154, 0.3076923, 0.0]), (2, [-0.3076923, 0.3076923, 0.0769231]), (2, [0.5384615, 0.3846154, 0.1538462]), (2, [0.3846154, 0.0769231, 0.0]), (2, [0.6153846, 0.3846154, 0.0769231]), (2, [0.6153846, 0.3076923, 0.1538462]), (2, [0.4615385, 0.3846154, 0.0769231]), (2, [-0.3846154, -0.6153846, 0.0]), (2, [0.4615385, 0.3076923, 0.0]), (2, [0.5384615, 0.3076923, 0.0769231]), (2, [0.6153846, 0.3076923, 0.0769231]), (2, [0.4615385, 0.2307692, 0.0]), (2, [0.3846154, 0.3846154, 0.0]), (2, [0.6153846, 0.4615385, 0.1538462]), (2, [-0.3076923, 0.2307692, 0.0769231]), (2, [0.5384615, 0.3076923, 0.0]), (2, [0.4615385, 0.1538462, 0.0769231]), (2, [0.5384615, 0.3846154, 0.0769231]), (2, [-0.3846154, 0.2307692, 0.0]), (2, [0.5384615, 0.2307692, 0.0769231]), (2, [-0.3846154, -0.5384615, 0.0769231]), (2, [0.5384615, 0.2307692, 0.0]), (2, [0.3846154, 0.0, 0.0]), (2, [0.5384615, 0.3846154, 0.0]), (2, [0.4615385, 0.3846154, 0.0]), (2, [0.4615385, 0.1538462, 0.0]), (2, [-0.3846154, 0.2307692, 0.0769231]), (2, [0.5384615, 0.4615385, 0.0769231]), (2, [-0.3846154, 0.1538462, 0.0]), (2, [-0.3846154, 0.0769231, 0.0]), (2, [-0.4615385, -0.5384615, 0.0]), (2, [0.4615385, 0.4615385, 0.0]), (2, [0.5384615, 0.1538462, 0.0769231]), (2, [0.5384615, 0.1538462, 0.0]), (2, [0.4615385, 0.0769231, 0.0]), (2, [-0.4615385, 0.0769231, 0.0]), (2, [0.4615385, 0.0, 0.0])]


# def test_Calibrate(caldb):
#     """Tests the functions of the Calibrate database.
#     """

#     caldb.setup()

#     # assert False
